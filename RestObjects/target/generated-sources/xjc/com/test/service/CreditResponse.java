//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.16 at 04:41:19 PM CST 
//


package com.test.service;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="creditScore" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="noOfAccounts" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="Accounts" type="{http://www.test.com/service}CreditAccount" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "creditScore",
    "noOfAccounts",
    "accounts"
})
@XmlRootElement(name = "CreditResponse")
public class CreditResponse implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int creditScore;
    protected int noOfAccounts;
    @XmlElement(name = "Accounts")
    protected List<CreditAccount> accounts;

    /**
     * Default no-arg constructor
     * 
     */
    public CreditResponse() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public CreditResponse(final int creditScore, final int noOfAccounts, final List<CreditAccount> accounts) {
        this.creditScore = creditScore;
        this.noOfAccounts = noOfAccounts;
        this.accounts = accounts;
    }

    /**
     * Gets the value of the creditScore property.
     * 
     */
    public int getCreditScore() {
        return creditScore;
    }

    /**
     * Sets the value of the creditScore property.
     * 
     */
    public void setCreditScore(int value) {
        this.creditScore = value;
    }

    /**
     * Gets the value of the noOfAccounts property.
     * 
     */
    public int getNoOfAccounts() {
        return noOfAccounts;
    }

    /**
     * Sets the value of the noOfAccounts property.
     * 
     */
    public void setNoOfAccounts(int value) {
        this.noOfAccounts = value;
    }

    /**
     * Gets the value of the accounts property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the accounts property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAccounts().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CreditAccount }
     * 
     * 
     */
    public List<CreditAccount> getAccounts() {
        if (accounts == null) {
            accounts = new ArrayList<CreditAccount>();
        }
        return this.accounts;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theCreditScore;
            theCreditScore = this.getCreditScore();
            strategy.appendField(locator, this, "creditScore", buffer, theCreditScore);
        }
        {
            int theNoOfAccounts;
            theNoOfAccounts = this.getNoOfAccounts();
            strategy.appendField(locator, this, "noOfAccounts", buffer, theNoOfAccounts);
        }
        {
            List<CreditAccount> theAccounts;
            theAccounts = this.getAccounts();
            strategy.appendField(locator, this, "accounts", buffer, theAccounts);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CreditResponse)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CreditResponse that = ((CreditResponse) object);
        {
            int lhsCreditScore;
            lhsCreditScore = this.getCreditScore();
            int rhsCreditScore;
            rhsCreditScore = that.getCreditScore();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "creditScore", lhsCreditScore), LocatorUtils.property(thatLocator, "creditScore", rhsCreditScore), lhsCreditScore, rhsCreditScore)) {
                return false;
            }
        }
        {
            int lhsNoOfAccounts;
            lhsNoOfAccounts = this.getNoOfAccounts();
            int rhsNoOfAccounts;
            rhsNoOfAccounts = that.getNoOfAccounts();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "noOfAccounts", lhsNoOfAccounts), LocatorUtils.property(thatLocator, "noOfAccounts", rhsNoOfAccounts), lhsNoOfAccounts, rhsNoOfAccounts)) {
                return false;
            }
        }
        {
            List<CreditAccount> lhsAccounts;
            lhsAccounts = this.getAccounts();
            List<CreditAccount> rhsAccounts;
            rhsAccounts = that.getAccounts();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "accounts", lhsAccounts), LocatorUtils.property(thatLocator, "accounts", rhsAccounts), lhsAccounts, rhsAccounts)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theCreditScore;
            theCreditScore = this.getCreditScore();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "creditScore", theCreditScore), currentHashCode, theCreditScore);
        }
        {
            int theNoOfAccounts;
            theNoOfAccounts = this.getNoOfAccounts();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "noOfAccounts", theNoOfAccounts), currentHashCode, theNoOfAccounts);
        }
        {
            List<CreditAccount> theAccounts;
            theAccounts = this.getAccounts();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accounts", theAccounts), currentHashCode, theAccounts);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CreditResponse) {
            final CreditResponse copy = ((CreditResponse) draftCopy);
            int sourceCreditScore;
            sourceCreditScore = this.getCreditScore();
            int copyCreditScore = strategy.copy(LocatorUtils.property(locator, "creditScore", sourceCreditScore), sourceCreditScore);
            copy.setCreditScore(copyCreditScore);
            int sourceNoOfAccounts;
            sourceNoOfAccounts = this.getNoOfAccounts();
            int copyNoOfAccounts = strategy.copy(LocatorUtils.property(locator, "noOfAccounts", sourceNoOfAccounts), sourceNoOfAccounts);
            copy.setNoOfAccounts(copyNoOfAccounts);
            if ((this.accounts!= null)&&(!this.accounts.isEmpty())) {
                List<CreditAccount> sourceAccounts;
                sourceAccounts = this.getAccounts();
                @SuppressWarnings("unchecked")
                List<CreditAccount> copyAccounts = ((List<CreditAccount> ) strategy.copy(LocatorUtils.property(locator, "accounts", sourceAccounts), sourceAccounts));
                copy.accounts = null;
                List<CreditAccount> uniqueAccountsl = copy.getAccounts();
                uniqueAccountsl.addAll(copyAccounts);
            } else {
                copy.accounts = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CreditResponse();
    }

}
